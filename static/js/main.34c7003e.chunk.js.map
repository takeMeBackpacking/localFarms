{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","restaurants","markers","fetch","then","resp","json","data","setState","records","catch","err","className","id","this","map","restaurant","fields","center","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","TileLayer","url","Component","TableRow","Name","Email","Website","Curbside","Delivery","Type","lon","lat","MarkerElement","Marker","position","lng","Popup","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,sLCwE5BC,E,kDAlEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAa,GACbC,QAAS,IAJM,E,gEAQE,IAAD,OAClBC,MAAM,mFACLC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UAEpBF,MAAK,SAAAG,GACH,EAAKC,SAAS,CAAEP,YAAaM,EAAKE,aAElCC,OAAM,SAAAC,S,+BAOT,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,OACV,2BAAOC,GAAG,oBACT,+BACE,4BACE,oCACA,qCACA,uCACA,wCACA,wCACA,sCAGJ,+BACGC,KAAKd,MAAMC,YAAYc,KAAI,SAAAC,GAAU,OAAI,kBAAC,EAAaA,EAAWC,cAK3E,yBAAKL,UAAU,OACb,kBAAC,IAAD,CACEM,OAAQ,CAAC,WAAY,YACrBC,KAAM,GACNC,QAAS,GACTC,oBAAoB,EACpBC,aAAa,EACbC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAU,EACVC,SAAS,EACTC,cAAe,KAEf,kBAACC,EAAA,EAAD,CACEC,IAAI,mEAELf,KAAKd,MAAMC,YAAYc,KAAI,SAAAC,GAAU,OAAI,kBAAC,EAAkBA,EAAWC,kB,GA3DlEa,aAqEZC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,SAAUC,EAAnC,EAAmCA,SAAUC,EAA7C,EAA6CA,KAA7C,EAAmDC,IAAnD,EAAwDC,IAAxD,OAChB,4BACE,4BAAKP,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,KAIHG,EAAgB,SAAC,GAAkE,IAAhER,EAA+D,EAA/DA,KAAgDM,GAAe,EAAzDL,MAAyD,EAAlDC,QAAkD,EAAzCC,SAAyC,EAA/BC,SAA+B,EAArBC,KAAqB,EAAfC,KAAKC,EAAU,EAAVA,IAC5E,OAAKD,GAAQC,EAIX,kBAACE,EAAA,EAAD,CACIC,SAAU,CAACH,IAAIA,EAAKI,IAAKL,IACzB,kBAACM,EAAA,EAAD,KACI,8BAAOZ,KANR,IC3ESa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdjD,OAAM,SAAAkD,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.34c7003e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react';\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      restaurants: [],\n      markers: []\n    };\n  }\n    \n  componentDidMount() {\n    fetch('https://api.airtable.com/v0/appXXMCwAfxx7g9sl/VENDORS?api_key=keyT2A9MZe2xbjLUW') \n    .then((resp) => resp.json()) \n\n    .then(data => {\n       this.setState({ restaurants: data.records });\n       \n    }).catch(err => {\n      // Error :(\n    });\n  }\n\n    \n  render() {\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n             <table id=\"restaurantsTable\">\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Email</th>\n                  <th>Website</th>\n                  <th>Curbside</th>\n                  <th>Delivery</th>\n                  <th>Type</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.restaurants.map(restaurant => <TableRow {...restaurant.fields} /> )}\n              </tbody>\n            </table>       \n        </div>\n        \n        <div className=\"row\">\n          <LeafletMap\n            center={[38.603786, -121.474507]}\n            zoom={12}\n            maxZoom={10}\n            attributionControl={true}\n            zoomControl={true}\n            doubleClickZoom={true}\n            scrollWheelZoom={true}\n            dragging={true}\n            animate={true}\n            easeLinearity={0.35}\n          >\n            <TileLayer\n              url='https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png'\n            />\n            {this.state.restaurants.map(restaurant => <MarkerElement {...restaurant.fields} /> )}\n          </LeafletMap>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst TableRow =  ({ Name, Email, Website, Curbside, Delivery, Type, lon, lat }) => (\n  <tr>\n    <td>{Name}</td>\n    <td>{Email}</td>\n    <td>{Website}</td>\n    <td>{Curbside}</td>\n    <td>{Delivery}</td>\n    <td>{Type}</td>\n  </tr>\n);\n\nconst MarkerElement = ({ Name, Email, Website, Curbside, Delivery, Type, lon, lat }) => {\n  if (!lon || !lat) { // evaluates to true if currentVideo is null\n    return \"\"; \n  }\n  return (\n    <Marker           \n        position={{lat:lat, lng: lon}}>\n        <Popup>\n            <span>{Name}</span>\n        </Popup>\n    </Marker>\n  );\n\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}